# -*- coding: utf-8 -*-
"""solar_assistant.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GLyDA_ka0E6VpBREXuNxkNACyRieYY5O
"""

!pip install --upgrade gradio

import gradio as gr
import requests
import random

# Hugging Face API token and model URL
api_token = 'your_hugging_face_api_key'  # Replace with actual API key
API_URL = "https://api-inference.huggingface.co/models/openai-community/gpt2"

# Knowledge base on solar energy
solar_knowledge = {
    "solar panel technology": """Solar panels come in different types:
    - **Monocrystalline**: High efficiency, long lifespan.
    - **Polycrystalline**: Cost-effective, slightly lower efficiency.
    - **Thin-film**: Lightweight, flexible, but less efficient.""",

    "installation": """The solar panel installation process involves:
    1. **Site assessment** to check sun exposure and roof condition.
    2. **Mounting system setup** to hold panels securely.
    3. **Panel installation** and wiring connection to the inverter.
    4. **System testing and activation** to start generating energy.""",

    "maintenance": """To keep solar panels efficient:
    - **Clean regularly** to remove dust and debris.
    - **Check for shading** from trees or new structures.
    - **Inspect wiring and inverters** to ensure optimal performance.""",

    "cost and ROI": """The return on investment (ROI) of solar panels depends on:
    - **Initial cost** of installation.
    - **Annual energy savings** from lower electricity bills.
    - **Government incentives and rebates** reducing upfront costs.
    - **Typical payback period** ranges from **5 to 10 years**.""",

    "regulations": """Regulations for solar panel installation vary by region:
    - **Permits may be required** from local authorities.
    - **Incentives available** such as tax credits and rebates.
    - **Safety codes and standards** must be followed to ensure compliance.""",

    "market trends": """The solar industry is evolving:
    - **Prices are dropping** due to technological advancements.
    - **Battery storage solutions** are becoming more popular.
    - **Smart solar systems** integrate with home automation for better efficiency."""
}

# Function to generate a response using API or knowledge base
def get_solar_advice(query):
    query_lower = query.lower()

    # Check if query matches predefined knowledge
    for key in solar_knowledge:
        if key in query_lower:
            return solar_knowledge[key]

    # If not in knowledge base, use Hugging Face API
    headers = {"Authorization": f"Bearer {api_token}"}
    prompt = f"Provide an informative yet conversational response to: {query}"
    payload = {"inputs": prompt, "parameters": {"max_length": 500, "num_return_sequences": 1}}

    try:
        response = requests.post(API_URL, headers=headers, json=payload)
        if response.status_code == 200:
            result = response.json()
            text_response = result[0]['generated_text'].strip()
            return refine_response(text_response)
        else:
            return "Couldn't retrieve details at the moment. Try again later."
    except Exception as e:
        return f"Error: {str(e)}"

# Function to make responses sound more natural
def refine_response(text):
    alternatives = [
        "Here's what I found interesting: ",
        "This might be useful: ",
        "From my understanding: ",
        "Let‚Äôs break it down: ",
        "Hope this helps! "
    ]
    prefix = random.choice(alternatives)
    return prefix + text.replace("###", "").strip()

# ROI Calculator
def calculate_roi(cost, savings):
    if savings > 0:
        payback = round(cost / savings, 2)
        return f"Based on your inputs, the estimated payback period is around **{payback} years**."
    return "Please enter valid values to estimate ROI."

# Placeholder function for solar news
def get_solar_news():
    return random.choice([
        "Breaking: New solar panel sets a world record for efficiency! üåû",
        "Government announces new tax incentives for residential solar installations.",
        "Major tech companies invest in solar energy to reduce carbon footprints."
    ])

# Gradio Interface
with gr.Blocks() as demo:
    gr.Markdown("# ‚òÄÔ∏è Solar Energy Insights")
    gr.Markdown("## Your go-to guide for solar technology, installation, and trends. üöÄ")

    with gr.Row():
        input_box = gr.Textbox(label="Ask a question about solar energy:", lines=2)
        submit_button = gr.Button("Get Answer")

    output_box = gr.Textbox(label="Solar Insights:", interactive=False)
    submit_button.click(fn=get_solar_advice, inputs=input_box, outputs=output_box)

    gr.Markdown("### Quick Questions:")
    with gr.Row():
        for q in ["What is the ROI of solar panels?", "How do I maintain solar panels?", "Are there government incentives for solar?"]:
            gr.Button(q).click(fn=get_solar_advice, inputs=gr.Textbox(value=q, visible=False), outputs=output_box)

    gr.Markdown("### Upload a Solar-related Document:")
    gr.File(label="Upload your document")

    gr.Markdown("### ROI Calculator:")
    cost_input = gr.Number(label="Installation Cost ($)")
    savings_input = gr.Number(label="Estimated Annual Savings ($)")
    roi_button = gr.Button("Calculate ROI")
    roi_output = gr.Textbox(label="ROI Result")
    roi_button.click(fn=calculate_roi, inputs=[cost_input, savings_input], outputs=roi_output)

    gr.Markdown("### Latest Solar News:")
    news_box = gr.Textbox(value=get_solar_news(), interactive=False)

    gr.Markdown("---")
    gr.Markdown("**üåû Knowledge shared for a greener tomorrow! üåç**")

# Launch Gradio App
demo.launch(share=True)

